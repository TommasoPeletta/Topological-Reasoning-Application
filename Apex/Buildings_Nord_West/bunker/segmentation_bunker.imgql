// Topological Reasoning Application
// Jonathan Lo, Tommaso Peletta, Adrien Razurel


import "stdlib.imgql"


let flt(x,a) = distleq(x,distgeq(x,!a))


load image = "bunker.jpg"



let r = red(image)
let g = green(image)
let b = blue(image)


//let tendentToGray = (r >. 50) & (g >. 50) & (b >. 20) & (b <. 35) & (r <. 100) & (g <. 70)
//save "output/tendentToGray.png" tendentToGray


//let background  = touch(!tendentToGray,border)
//save "output/background.png" background

// Montagne :
//let montagne = flt(2,!flt(3,background))
//save "output/montagne.png" montagne






// Segmentation des batiments :
let buildings = ((r >. 70) & (g >. 50) & (b >. 60)) & (r <. 210) & (g <. 210) & (b <. 210)
save "output/buildings.png" buildings

// Masque avec la zone choisie :
let maskCircle = distleq(150,((r >. 250) & (g <. 11) & (b <. 11)))
save "output/maskCircle.png" maskCircle

// Filtre sur les batiments :
let buildingsFiltered = flt(3,(buildings))
//let buildingsFiltered = flt(5,(flt(2,flt(1,(buildings)))))
save "output/buildingsFiltered.png" buildingsFiltered

// Segmentation des batiments de la zone du masque :
let buildingsSeg = and(maskCircle, buildingsFiltered)
save "output/bunker_buildingsSeg.png" buildingsSeg

// Remise des couleurs des batiments segmentes :
let buildingsSegRGB = rgb(mask(r,buildingsSeg),mask(g,buildingsSeg),mask(b,buildingsSeg))
save "output/bunker_buildingsSegRGB.png" buildingsSegRGB

save "output/original.png" image
